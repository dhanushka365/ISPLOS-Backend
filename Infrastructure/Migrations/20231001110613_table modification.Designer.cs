// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20231001110613_table modification")]
    partial class tablemodification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("RemainBalance")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Core.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.DeliveryMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("deliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusTypeId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1eef7e9-fc13-48f2-9cb4-c524197233d5"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6028),
                            Name = "Order Progression-1",
                            OrderStatusTypeId = new Guid("d7e30b26-be5b-4556-8689-7a378c37b690"),
                            Status = "Pending",
                            StatusCode = "101",
                            StatusMessage = "Order is pending",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6028)
                        },
                        new
                        {
                            Id = new Guid("f5f5ec78-14d9-4e7f-9578-df2298944691"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6032),
                            Name = "Order Progression-2",
                            OrderStatusTypeId = new Guid("d7e30b26-be5b-4556-8689-7a378c37b690"),
                            Status = "Processing",
                            StatusCode = "102",
                            StatusMessage = "Order is processing",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6032)
                        },
                        new
                        {
                            Id = new Guid("7f0122e5-190e-4d7a-bfd8-e85b3c3b4db8"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6035),
                            Name = "Order Progression-3",
                            OrderStatusTypeId = new Guid("d7e30b26-be5b-4556-8689-7a378c37b690"),
                            Status = "Shipped",
                            StatusCode = "103",
                            StatusMessage = "Order is shipped",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6035)
                        },
                        new
                        {
                            Id = new Guid("cd2ddfaf-47f9-47d6-9cac-33888c5bcac4"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6039),
                            Name = "Order Progression-4",
                            OrderStatusTypeId = new Guid("d7e30b26-be5b-4556-8689-7a378c37b690"),
                            Status = "Delivered",
                            StatusCode = "104",
                            StatusMessage = "Order is delivered",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6040)
                        },
                        new
                        {
                            Id = new Guid("4d838fe2-e863-4725-8cc7-eaf9c20c90c3"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6042),
                            Name = "Order Progression-5",
                            OrderStatusTypeId = new Guid("d7e30b26-be5b-4556-8689-7a378c37b690"),
                            Status = "Cancelled",
                            StatusCode = "105",
                            StatusMessage = "Order is cancelled",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6043)
                        },
                        new
                        {
                            Id = new Guid("22b30c96-f4a3-469c-a014-8c1730b78cce"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6046),
                            Name = "Financial Transaction-1",
                            OrderStatusTypeId = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            Status = "Pending",
                            StatusCode = "201",
                            StatusMessage = "Financial transaction is pending",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6046)
                        },
                        new
                        {
                            Id = new Guid("9d04cef3-2af2-4d0f-bcbd-7e32ebf823e2"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6048),
                            Name = "Financial Transaction-2",
                            OrderStatusTypeId = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            Status = "Processing",
                            StatusCode = "202",
                            StatusMessage = "Financial transaction is processing",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6049)
                        },
                        new
                        {
                            Id = new Guid("6230f3e0-55ba-483d-8de3-fb815c285f20"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6051),
                            Name = "Financial Transaction-3",
                            OrderStatusTypeId = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            Status = "Completed",
                            StatusCode = "203",
                            StatusMessage = "Financial transaction is completed",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6051)
                        },
                        new
                        {
                            Id = new Guid("2de8a435-05e9-4da4-94c2-5b37dc2d2e90"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6054),
                            Name = "Financial Transaction-4",
                            OrderStatusTypeId = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            Status = "Cancelled",
                            StatusCode = "204",
                            StatusMessage = "Financial transaction is cancelled",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6055)
                        },
                        new
                        {
                            Id = new Guid("91969299-b60d-4ce8-839c-744d306a5ea5"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6082),
                            Name = "Authorization and Pay Mod-1",
                            OrderStatusTypeId = new Guid("7d3e960c-b107-4afc-b51c-355ec20c9f02"),
                            Status = "Verified",
                            StatusCode = "301",
                            StatusMessage = "Payment method verified",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6082)
                        },
                        new
                        {
                            Id = new Guid("0458d6bd-2bb5-48ef-90e1-a728fd20464e"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6084),
                            Name = "Payment Status-1",
                            OrderStatusTypeId = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            Status = "Paid",
                            StatusCode = "401",
                            StatusMessage = "Order Paid",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6085)
                        },
                        new
                        {
                            Id = new Guid("a9fbcc63-124f-4ea1-956d-6676db5899ea"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6088),
                            Name = "Payment Status-2",
                            OrderStatusTypeId = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            Status = "partially Paid",
                            StatusCode = "402",
                            StatusMessage = "Order Partially Paid",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6089)
                        },
                        new
                        {
                            Id = new Guid("f6710551-d0af-4b54-8f62-88a45d874538"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6091),
                            Name = "Payment Status-3",
                            OrderStatusTypeId = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            Status = "unPaid",
                            StatusCode = "403",
                            StatusMessage = "Order is UnPaid",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(6091)
                        });
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatusType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuseTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7e30b26-be5b-4556-8689-7a378c37b690"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5941),
                            Description = "Order progression refers to the series of steps or stages that an order goes through from the moment it is placed until it is fulfilled or completed. This process is commonly associated with e-commerce, retail, manufacturing, and various other industries where goods or services are exchanged between a customer and a business.",
                            Name = "Order Progression",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5958)
                        },
                        new
                        {
                            Id = new Guid("55f0487b-6c64-4528-a320-0583bdb71035"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5962),
                            Description = "A financial transaction refers to the exchange of funds or financial assets between two or more parties. These transactions are essential in the functioning of economies and businesses, enabling the flow of money, resources, and investments. Financial transactions can take many forms and serve various purposes, but they typically involve the transfer of money, securities, or other financial instruments.",
                            Name = "Financial Transaction",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5963)
                        },
                        new
                        {
                            Id = new Guid("7d3e960c-b107-4afc-b51c-355ec20c9f02"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5965),
                            Description = "Authorization and the Payment Module work together to create a secure and user-friendly experience. Authorization ensures that users have proper access, while the Payment Module facilitates hassle-free and secure transactions, making it convenient for customers to order and pay for their lunch",
                            Name = "Authorization and Pay Mod",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5965)
                        },
                        new
                        {
                            Id = new Guid("0ec11df3-ffa1-4c75-8671-43049d051d34"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5967),
                            Description = "Payment status refers to the state or condition of a financial transaction at a specific point in time. It provides information about whether a payment has been successfully completed, is pending, or has encountered issues. Payment status is important for both the payer and the payee as it indicates the outcome of a financial transaction.",
                            Name = "Payment Status",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5967)
                        },
                        new
                        {
                            Id = new Guid("674d56ff-39d0-4163-9bea-b0afdae726d6"),
                            CreatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5969),
                            Description = "\"Review\" and \"Dispute\" are essential features that can enhance the user experience and address potential issues.",
                            Name = "Review and Dispute",
                            UpdatedAt = new DateTime(2023, 10, 1, 16, 36, 13, 260, DateTimeKind.Local).AddTicks(5969)
                        });
                });

            modelBuilder.Entity("Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core.Entities.ProductBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Core.Entities.Balance", b =>
                {
                    b.HasOne("Core.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Identity.User", b =>
                {
                    b.HasOne("Core.Entities.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.HasOne("Core.Entities.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderProduct", b =>
                {
                    b.HasOne("Core.Entities.OrderAggregate.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatus", b =>
                {
                    b.HasOne("Core.Entities.OrderAggregate.OrderStatusType", "OrderStatusType")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("OrderStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatusType");
                });

            modelBuilder.Entity("Core.Entities.Payment", b =>
                {
                    b.HasOne("Core.Entities.Identity.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Identity.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatusType", b =>
                {
                    b.Navigation("OrderStatuses");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
