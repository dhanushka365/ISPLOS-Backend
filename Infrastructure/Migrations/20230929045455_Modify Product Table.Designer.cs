// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20230929045455_Modify Product Table")]
    partial class ModifyProductTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedByUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("remainBalance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Core.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.DeliveryMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("deliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusTypeId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06865ac6-6626-403f-85ae-bc723bccbcca"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2163),
                            Name = "Order Progression-1",
                            OrderStatusTypeId = new Guid("1bb00eb6-28c3-478a-a649-899c0c213b69"),
                            Status = "Pending",
                            StatusCode = "101",
                            StatusMessage = "Order is pending",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2163)
                        },
                        new
                        {
                            Id = new Guid("aba7d488-cafd-415c-b2ce-e7627db74322"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2171),
                            Name = "Order Progression-2",
                            OrderStatusTypeId = new Guid("1bb00eb6-28c3-478a-a649-899c0c213b69"),
                            Status = "Processing",
                            StatusCode = "102",
                            StatusMessage = "Order is processing",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2172)
                        },
                        new
                        {
                            Id = new Guid("1160a99b-42f4-4129-b47b-0d5f5996977a"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2175),
                            Name = "Order Progression-3",
                            OrderStatusTypeId = new Guid("1bb00eb6-28c3-478a-a649-899c0c213b69"),
                            Status = "Shipped",
                            StatusCode = "103",
                            StatusMessage = "Order is shipped",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2176)
                        },
                        new
                        {
                            Id = new Guid("da7aaf2f-c379-4ce7-9266-c728a48ef8f7"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2180),
                            Name = "Order Progression-4",
                            OrderStatusTypeId = new Guid("1bb00eb6-28c3-478a-a649-899c0c213b69"),
                            Status = "Delivered",
                            StatusCode = "104",
                            StatusMessage = "Order is delivered",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2180)
                        },
                        new
                        {
                            Id = new Guid("e2752bdd-6c9f-47e8-bd5a-5b8e6b432803"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2184),
                            Name = "Order Progression-5",
                            OrderStatusTypeId = new Guid("1bb00eb6-28c3-478a-a649-899c0c213b69"),
                            Status = "Cancelled",
                            StatusCode = "105",
                            StatusMessage = "Order is cancelled",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2185)
                        },
                        new
                        {
                            Id = new Guid("78fe775c-bdd5-49df-b70f-0ea904657fd9"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2190),
                            Name = "Financial Transaction-1",
                            OrderStatusTypeId = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            Status = "Pending",
                            StatusCode = "201",
                            StatusMessage = "Financial transaction is pending",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2191)
                        },
                        new
                        {
                            Id = new Guid("d2258c19-f470-47d0-8645-fc05e608f0a3"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2194),
                            Name = "Financial Transaction-2",
                            OrderStatusTypeId = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            Status = "Processing",
                            StatusCode = "202",
                            StatusMessage = "Financial transaction is processing",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2195)
                        },
                        new
                        {
                            Id = new Guid("1159280e-772b-490d-b58c-dcf96ea1774e"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2202),
                            Name = "Financial Transaction-3",
                            OrderStatusTypeId = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            Status = "Completed",
                            StatusCode = "203",
                            StatusMessage = "Financial transaction is completed",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2203)
                        },
                        new
                        {
                            Id = new Guid("87a2b7d7-b331-4f93-8cdd-a688acd8b5eb"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2206),
                            Name = "Financial Transaction-4",
                            OrderStatusTypeId = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            Status = "Cancelled",
                            StatusCode = "204",
                            StatusMessage = "Financial transaction is cancelled",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2207)
                        },
                        new
                        {
                            Id = new Guid("7d032f8b-0cb7-4c0f-bb68-fcbe0b3bc11f"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2212),
                            Name = "Authorization and Pay Mod-1",
                            OrderStatusTypeId = new Guid("cf6b846c-2e87-4003-90d8-7d7f302d87c2"),
                            Status = "Verified",
                            StatusCode = "301",
                            StatusMessage = "Payment method verified",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2213)
                        },
                        new
                        {
                            Id = new Guid("6659248d-62fe-49e4-aa62-72d8fe77a53c"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2216),
                            Name = "Payment Status-1",
                            OrderStatusTypeId = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            Status = "Paid",
                            StatusCode = "401",
                            StatusMessage = "Order Paid",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2216)
                        },
                        new
                        {
                            Id = new Guid("160a23d3-2177-4bbd-9d80-ade1e0192d8b"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2219),
                            Name = "Payment Status-2",
                            OrderStatusTypeId = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            Status = "partially Paid",
                            StatusCode = "402",
                            StatusMessage = "Order Partially Paid",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2220)
                        },
                        new
                        {
                            Id = new Guid("ba482740-269d-4dda-8290-360a3f0dd4ae"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2223),
                            Name = "Payment Status-3",
                            OrderStatusTypeId = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            Status = "unPaid",
                            StatusCode = "403",
                            StatusMessage = "Order is UnPaid",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(2223)
                        });
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatusType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuseTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bb00eb6-28c3-478a-a649-899c0c213b69"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1942),
                            Description = "Order progression refers to the series of steps or stages that an order goes through from the moment it is placed until it is fulfilled or completed. This process is commonly associated with e-commerce, retail, manufacturing, and various other industries where goods or services are exchanged between a customer and a business.",
                            Name = "Order Progression",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1958)
                        },
                        new
                        {
                            Id = new Guid("9d5de1d3-2311-41b1-baf0-c91f519edd60"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1965),
                            Description = "A financial transaction refers to the exchange of funds or financial assets between two or more parties. These transactions are essential in the functioning of economies and businesses, enabling the flow of money, resources, and investments. Financial transactions can take many forms and serve various purposes, but they typically involve the transfer of money, securities, or other financial instruments.",
                            Name = "Financial Transaction",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1965)
                        },
                        new
                        {
                            Id = new Guid("cf6b846c-2e87-4003-90d8-7d7f302d87c2"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1969),
                            Description = "Authorization and the Payment Module work together to create a secure and user-friendly experience. Authorization ensures that users have proper access, while the Payment Module facilitates hassle-free and secure transactions, making it convenient for customers to order and pay for their lunch",
                            Name = "Authorization and Pay Mod",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1969)
                        },
                        new
                        {
                            Id = new Guid("0d25d270-9770-4b5e-8861-f7f5e1ce7f50"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1972),
                            Description = "Payment status refers to the state or condition of a financial transaction at a specific point in time. It provides information about whether a payment has been successfully completed, is pending, or has encountered issues. Payment status is important for both the payer and the payee as it indicates the outcome of a financial transaction.",
                            Name = "Payment Status",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1973)
                        },
                        new
                        {
                            Id = new Guid("96dc8da0-332a-4595-98a8-d425baa68ae8"),
                            CreatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1987),
                            Description = "\"Review\" and \"Dispute\" are essential features that can enhance the user experience and address potential issues.",
                            Name = "Review and Dispute",
                            UpdatedAt = new DateTime(2023, 9, 29, 10, 24, 55, 36, DateTimeKind.Local).AddTicks(1988)
                        });
                });

            modelBuilder.Entity("Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core.Entities.PaymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core.Entities.ProductBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Core.Entities.Balance", b =>
                {
                    b.HasOne("Core.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Identity.User", b =>
                {
                    b.HasOne("Core.Entities.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.HasOne("Core.Entities.Payment", null)
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Core.Entities.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderProduct", b =>
                {
                    b.HasOne("Core.Entities.OrderAggregate.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatus", b =>
                {
                    b.HasOne("Core.Entities.OrderAggregate.OrderStatusType", "OrderStatusType")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("OrderStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatusType");
                });

            modelBuilder.Entity("Core.Entities.Payment", b =>
                {
                    b.HasOne("Core.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusId");

                    b.HasOne("Core.Entities.Identity.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Identity.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderStatusType", b =>
                {
                    b.Navigation("OrderStatuses");
                });

            modelBuilder.Entity("Core.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Core.Entities.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
